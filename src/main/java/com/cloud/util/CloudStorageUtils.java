/*************************************************************************
 *
 *  HCL Technologies..... CONFIDENTIAL
 * _________________________________________________________________________________
 *
 * Copyright 2020 HCL Technologies. All rights reserved.
 *
 * NOTICE: All information contained herein is, and remains the property of HCL Technologies.
 *
 *************************************************************************/
// Author : Generated by ADvantageCloud
// Revision History :


package com.cloud.util;

import com.google.auth.oauth2.ServiceAccountCredentials;
import com.google.cloud.storage.*;
import com.google.cloud.storage.Storage.SignUrlOption;
import com.presto.banking.util.ReadPropertyFile;
import org.apache.log4j.Logger;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

/**
 * This util class is used to send object in CLoud storage
 * and get a signed URL of the uploaded object
 */
public class CloudStorageUtils {
    private static final Logger logger = Logger.getLogger(CloudStorageUtils.class);

    /**
     * This method upload the object to Cloud Storage
     *
     * @param fileName Name of the file to be uploaded
     * @param filePath location of the file to be uploaded
     * @throws IOException
     */
    public static void sendObjectToBucket(String fileName, String filePath) throws IOException {

        // Properties prop = new ReadPropertyFile().config();
        Properties prop = new Properties();
        InputStream gcpinputStream = CloudStorageUtils.class.getClassLoader().getResourceAsStream("gcpcloudconfig.properties");
        try {
			prop.load(gcpinputStream);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		
        Storage storage = StorageOptions.getDefaultInstance().getService();

        BlobId blobId = BlobId.of(prop.get("cloud.bucket.name").toString(), fileName);
        BlobInfo blobInfo = BlobInfo.newBuilder(blobId).build();
        storage.create(blobInfo, Files.readAllBytes(Paths.get(filePath)));

        logger.info("File uploaded to bucket " + blobInfo.getBucket());
    }

    /**
     * This method returns the signed URL of the object stored in Cloud Storage
     *
     * @param fileName Name of the file for which the signed URL is needed
     * @return
     * @throws IOException
     */
    public static String getSignedUrl(String fileName) throws IOException {
        Storage storage = StorageOptions.getDefaultInstance().getService();
        String signedFilePath = null;

        // Properties prop = new ReadPropertyFile().config();
        Properties prop = new Properties();
        InputStream gcpinputStream = CloudStorageUtils.class.getClassLoader().getResourceAsStream("gcpcloudconfig.properties");
        try {
			prop.load(gcpinputStream);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
        Blob blob = storage.get(BlobId.of(prop.get("cloud.bucket.name").toString(), fileName));
        URL signUrl = blob.signUrl(14, TimeUnit.DAYS, SignUrlOption.signWith(ServiceAccountCredentials
                .fromStream(new FileInputStream(System.getenv("GOOGLE_APPLICATION_CREDENTIALS")))));
        signedFilePath = signUrl.toString();

        return signedFilePath;
    }

}
